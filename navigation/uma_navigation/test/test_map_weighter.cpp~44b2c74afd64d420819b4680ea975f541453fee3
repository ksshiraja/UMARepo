// Copyright 2019 <UMAutonomy>
#include "gtest/gtest.h"
#include "uma_navigation/map_weighter.h"
#include <vector>
#include <string>


int min_x = 0;
int max_x = 10;
int min_y = 0;
int max_y = 10;
GridLayer gridLayer;
TEST(MovementModelTest, StaysSameAt0Degrees)
{
    costmap_2d::Costmap2D master_grid(10, 10, 1, 0, 0, 0);
    master_grid.setCost(4, 5, 75);
    int initialValue = master_grid.getCost(4, 5);
    gridLayer.updateBounds(0, 0, M_PI, 0, 0, 0, 0);
    gridLayer.updateCosts(master_grid, min_x, min_y, max_x, max_y);
    int finalValue = master_grid.getCost(4, 5);
    EXPECT_EQ(initialValue, finalValue);
}
TEST(MovementModelTest, StaysSameAt45Degrees)
{
    costmap_2d::Costmap2D master_grid(10, 10, 1, 0, 0, 0);
    master_grid.setCost(7, 7, 75);
    int initialValue = master_grid.getCost(7, 7);
    gridLayer.updateBounds(0, 0, 0, 0, 0, 0, 0);
    gridLayer.updateCosts(master_grid, min_x, min_y, max_x, max_y);
    int finalValue = master_grid.getCost(7, 7);
    EXPECT_EQ(initialValue, finalValue);
}
TEST(MovementModelTest, StaysSameAtLethal)
{
    costmap_2d::Costmap2D master_grid(10, 10, 1, 0, 0, 0);
    master_grid.setCost(6, 5, 254);
    int initialValue = master_grid.getCost(6, 5);  // get value at any index
    gridLayer.updateBounds(0, 0, M_PI, 0, 0, 0, 0);
    gridLayer.updateCosts(master_grid, min_x, min_y, max_x, max_y);
    int finalValue = master_grid.getCost(6, 5);
    EXPECT_EQ(initialValue, finalValue);
}
TEST(MovementModelTest, NoIncreasePastLethal)  // does not increase past
{
    // initial value IV, 155<= IV <254
    costmap_2d::Costmap2D master_grid(10, 10, 1, 0, 0, 0);
    master_grid.setCost(6, 5, 200);
    int initialValue = master_grid.getCost(6, 5);
    gridLayer.updateBounds(0, 0, M_PI, 0, 0, 0, 0);
    gridLayer.updateCosts(master_grid, min_x, min_y, max_x, max_y);
    int finalValue = master_grid.getCost(6, 5);
    EXPECT_EQ(253, finalValue);
}
TEST(MovementModelTest, AddsValueAtPiDegrees)  // test the movement model weighing at pi degrees between boat and box
{
    costmap_2d::Costmap2D master_grid(10, 10, 1, 0, 0, 0);
    master_grid.setCost(2, 5, 75);  // Set the initial value to something less than 155
    int initialValue = master_grid.getCost(2, 5);  // could be anywhere, just choses 5,5
    gridLayer.updateBounds(0, 0, 0, 0, 0, 0, 0);
    gridLayer.updateCosts(master_grid, min_x, min_y, max_x, max_y);
    int finalValue = master_grid.getCost(2, 5);
    EXPECT_EQ(initialValue + 69, finalValue);
}
// test the movement model weighing at pi/2 degrees between boat and box
TEST(MovementModelTest, AddsValueAtPiOver2Degrees)
{
    costmap_2d::Costmap2D master_grid(10, 10, 1, 0, 0, 0);
    master_grid.setCost(5, 7, 75);  // Set the initial value to something less than 155
    int initialValue = master_grid.getCost(5, 7);  // could be anywhere, just choses 5,5
    gridLayer.updateBounds(0, 0, M_PI, 0, 0, 0, 0);
    gridLayer.updateCosts(master_grid, min_x, min_y, max_x, max_y);
    int finalValue = master_grid.getCost(5, 7);
    EXPECT_EQ(initialValue + 29, finalValue);
}
// test the movement model weighing at 3pi/4 degrees between boat and box
TEST(MovementModelTest, AddsValueAt3PiOver4Degrees)
{
    costmap_2d::Costmap2D master_grid(10, 10, 1, 0, 0, 0);
    master_grid.setCost(3, 3, 75);  // Set the initial value to something less than 155
    int initialValue = master_grid.getCost(3, 3);  // could be anywhere, just choses 5,5
    gridLayer.updateBounds(0, 0, 0, 0, 0, 0, 0);
    gridLayer.updateCosts(master_grid, min_x, min_y, max_x, max_y);
    int finalValue = master_grid.getCost(3, 3);
    EXPECT_EQ(initialValue + 53, finalValue);
}
// find the corner points of the large box used to find the grid boxes to weigh
TEST(MovementModelTest, findCornerPoints)
{
    std::vector<DoublePoint> points = gridLayer.getCornerPoints(-.6);
    std::ostringstream values;
    std::ostringstream correct;
    correct << " 4.169930.782079 -0.7820794.16993 -4.16993-0.782079 0.782079-4.16993";
     for (unsigned i = 0; i < points.size(); i++)
    {
        values << ' ' << points.at(i).x << points.at(i).y;
    }

     EXPECT_EQ(values.str(), correct.str());
}
// find the boxes to weigh when the angle between the boat and the x axis is multiple of pi/2
TEST(MovementModelTest, getBoxesToWeighInLine)
{
    std::vector<IntPoint> points = gridLayer.getBoxesToWeigh(M_PI/2, min_x, min_y, max_x, max_y);
    std::ostringstream values;
    std::ostringstream correct;
    correct << " 2 2 2 3 2 4 2 5 2 6 2 7 2 8 3 2 3 3 3 4 3 5 3 6 3 7 3 8 4 2 4 3 4 4 4 5 4 6 4 7 4 8 5 2 5 3";
    correct << " 5 4 5 5 5 6 5 7 5 8 6 2 6 3 6 4 6 5 6 6 6 7 6 8 7 2 7 3 7 4 7 5 7 6 7 7 7 8 8 2 8 3 8 4";
    correct << " 8 5 8 6 8 7 8 8";
    for (unsigned i = 0; i < points.size(); ++i)
    {
        values << " " << points.at(i).x << " " << points.at(i).y;
    }

    EXPECT_EQ(values.str(), correct.str());
}
// find the boxes to weigh when the angle between the boat and the x axis is pi/4
TEST(MovementModelTest, getBoxesToWeighPiOver4)
{
    std::vector<IntPoint> points = gridLayer.getBoxesToWeigh(M_PI/4, min_x, min_y, max_x, max_y);
    std::ostringstream values;
    std::ostringstream correct;
    correct << " 1 5 2 4 2 5 2 6 3 3 3 4 3 5 3 6 3 7 4 2 4 3 4 4 4 5 4 6 4 7 4 8 5 1 5 2 5 3 5 4 5 5 5 6 5 7 5 8 5 9";
    correct << " 6 2 6 3 6 4 6 5 6 6 6 7 6 8 7 3 7 4 7 5 7 6 7 7 8 4 8 5 8 6 9 5";
    for (unsigned i = 0; i < points.size(); ++i)
    {
        values << " " << points.at(i).x << " " << points.at(i).y;
    }

    EXPECT_EQ(values.str(), correct.str());
}
// find the boxes to weigh when the angle between the boat and the x axis is pi/8
TEST(MovementModelTest, getBoxesToWeighPiOver8)
{
    std::vector<IntPoint> points = gridLayer.getBoxesToWeigh(M_PI/8, min_x, min_y, max_x, max_y);
    std::ostringstream values;
    std::ostringstream correct;
    correct << " 2 5 2 6 2 7 3 2 3 3 3 4 3 5 3 6 3 7 4 2 4 3 4 4 4 5 4 6 4 7 5 2 5 3 5 4 5 5 5 6 5 7 5 8";
    correct << " 6 3 6 4 6 5 6 6 6 7 6 8 7 3 7 4 7 5 7 6 7 7 7 8 8 3 8 4 8 5";
    for (unsigned i = 0; i < points.size(); ++i)
    {
        values << " " << points.at(i).x << " " << points.at(i).y;
    }

    EXPECT_EQ(values.str(), correct.str());
}
int main(int argc, char **argv)
{
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
